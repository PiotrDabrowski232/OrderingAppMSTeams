@page "/Restaurant/{Id:guid}/{Name}"
@using MediatR
@using OrderingApp.Logic.DTO
@using OrderingApp.Logic.Functions.Query.Restaurant
@inject IMediator _mediator;


<p style="padding-left:1vw; padding: 4vh;">
    <a href="/Main/tab-2" class="link-warning link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">
        <i class="bi bi-arrow-left" style="font-size:20px;"></i>  Back To Restaurant List
    </a>
</p>

<div style="width:80vw; padding-left:2vw;">
    <h3>@Name Restaurant Menu</h3>

    <h2>Main Dishes</h2>

    <FluentDataGrid Items="@Main">
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Description)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Calories + " cal")" Sortable="true" />
        <PropertyColumn Property="@(p => p.Price + "zł")" Sortable="true" />
    </FluentDataGrid>

    <h2>Extras</h2>

    <FluentDataGrid Items="@Extras">
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Description)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Calories + " cal")" Sortable="true" />
        <PropertyColumn Property="@(p => p.Price + " zł")" Sortable="true" />
    </FluentDataGrid>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }
    [Parameter]
    public string Name { get; set; }

    public IQueryable<DishDto> Main { get; set; }
    public IQueryable<DishDto> Extras { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var dish = await _mediator.Send(new GetRestaurantDishesExtrasQuery(Id));

        Main = dish.Main.AsQueryable();
        Extras = dish.Extras.AsQueryable();
    }
}
